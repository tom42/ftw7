* Fix build process:
  * Clean build fails the first time, because GLFW needs hooked_functions.h, which
    is a generated source built as part of ftw7_conemu. hooked_functions.h needs
	to somehow become a dependency of GLFW
* Here's a list of functions prototype I is hooking. Check them and implement them if it makes sense.
  * kernel32
    * CreateConsoleScreenBuffer
    * SetConsoleCursorInfo
    * SetConsoleMode
    * SetConsoleScreenBufferSize
* display driver handling is a mess
  * Somewhere there's a factory function that creates display drivers from display driver codes
  * commandline.cpp contains code to map from strings to display driver codes.
* string.cpp: some stuff in there could do with some unit testing, and also optimizing (string lengths are determined multiple times)
* Log output to console: this is sometimes tricky.
  * Console applications work out of the box.
  * Magrathea: Succeeds with the following steps
    * Pass the launcher's process ID to the emulation DLL
	* Inside the emulation DLL
	  * Use AttachConsole to attach to the parent process' console
	  * Use WriteConsole(W) to write to the console
	  * Be careful, though: MSDN says:
	    "WriteConsole fails if it is used with a standard handle that is redirected to a file.
		If an application processes multilingual output that can be redirected, determine whether
		the output handle is a console handle (one method is to call the GetConsoleMode function
		and check whether it succeeds). If the handle is a console handle, call WriteConsole.
		If the handle is not a console handle, the output is redirected and you should call
		WriteFile to perform the I/O."...oh well.
