* Get stuff compiling again with VS2015
  * get rid of boost in production code (simpler hacking when on the road, besides, C++11/17/whatever is good enough)
* Should try setting up our build process like this: https://rix0r.nl/blog/2015/08/13/cmake-guide/
* We've got working file filters in argp's CMakeLists.txt: should put this into a library of some sorts and make use of it
* Think about our horrible wruntime_error or however we called it: can't we just assume/use UTF8 and be done with it?
* Windows XP support
  * Use the VS 2013 generator with the -T v120_xp option (set toolset). This is able to produce binaries that load on windows xp => Document this somewhere
  * Also we need to solve DLL locating problems.
  * GDI display driver can't set fullscreen mode. It doesn't really say why, tho. This may be a Windows XP mode Problem, though.
  * OpenGL display driver doesn't run at all, but this may be a Windows XP Mode Problem
* glfw wrapper
  * Rename set_glfw_window to initialize and perhaps also document it a bit, since before we had it we had quite an interesting bug
  * Find a solution where we can hide the GLFW API functions from glfw wrapper users altogether?
  * should really make monitor and window ctors private and grant the glfw class friend access...
* This is interesting: http://blogs.msdn.com/b/oldnewthing/archive/2014/08/22/10551964.aspx
  * Possibly we can simply call OpenThread on the main thread and this should ensure that the thread ID is preserved until we CloseThread again.
    That would be incredibly useful for thread checking. Yay?
* ftw7_conemu.dll
  * consider linking the C/C++ runtime statically. We won't have ANY DLL location problems that way, since we're already statically linking GLFW.
  * Or use some SetDllDirectory magick inside the startup code to point windows at the ftw7 binaries.
    Here's the problem:
    * We have ftw7.exe, ftw7_conemu.dll and whatnot in one directory, alongside with msvcp120.dll and msvcr120.dll
    * We have a demo in another directory
    * ftw7 is loaded and finds its msvcp120.dll etc.
    * It CreateProcesses the demo, using the demo executable's directory as current directory.
    * It injects the ftw7_conemu.dll loading code
    * It runs the demo. The first thing that runs is the injection code
    * Injection code tries to LoadLibrary ftw7_conemu.dll. Since it's using an absolute path, ftw7_conemu.dll can still be found,
      but then ftw7_conemu.dll depends on msvcp120.dll and msvcr120.dll, which might not be present in the system directory.
      Since the current directory is the demo exe directory and not ftw7's directory, the dlls aren't founs even if they're
      deployed alongside with ftw7.exe => Boom.
    => Possible solutions
       * Link VS runtimes statically to ftw7_conemu.dll
       * Have an installer that puts them into the system directory (orly?)
       * Deploy them alongside with ftw7 as we did up to now and use SetDllDirectory inside the injection code
         to get our own DLLs loaded. Should later restore them again.
* display drivers: stop tinkering around
  * What kind of display modes should we support?
    * windowed
    * fullscreen window
    * real fullscreen (orly?)
    * Why do we internally distinguish between window and screen dimensions?
      On command line we support setting screen dimensions only. Not sure what I was thinking there. Nothing, probably.
  * Scaling modes?
    * Stretch to fit, maintaining aspect ratio
    * No scaling (center on screen)
    * Scale by integer amount and center
  * Attempt to emulate real vga output? (Ninth column)
* Clean up opengl and gdi display drivers:
  * Variable Window width/height
  * Screen width/screen height
  * Fullscreen mode
  * Refresh rate
  * Color depth (?)
  * Alt+Enter for fullscreen/windowed mode switching
* drivers/interface:
  * On the work notebook, ChangeDisplaySettingsEx in fact DOES work => Test this again, perhaps we can make the GDI driver work too.
  * Do a simple fix for cernunnos: don't think there are too many other
    demos that pull off shit like that
* Fixage, hopefully to be applied somewhen:
  * Litterae Finis:
    * Can still quit if ESC is pressed and the console window is active: find out what API function to intercept and make it a no-op
  * Cernunnos:
    * Somehow manages to interfere with the opengl display driver.
    * Fucks up console logging, but then, we should probably not rely on the console for logging.
  * Clockwerck
    * Spurious crashes at end of demo. That's why --no-error-dialogs has been implemented
  * Display drivers: a horrible mess they are, that's what they are.
  * Whoops:
    "No window classes registered by a DLL are unregistered when the DLL is unloaded.
    A DLL must explicitly unregister its classes when it is unloaded."
    => Well...that's when the DLL is dynamically unloaded using FreeLibrary.
    => Window classes are unregistered when a process terminates. There's
       some blog entry from raymond chen on that subject.
    => Document this somewhere in the gdi display driver and be done with it.
  * Some logging facility
    * What we have is probably already pretty good
    * Add a mechanism to add certain messages only once
      * Doesn't need to be all THAT thread-safe =)
* Damit:
  * Features for a reimplementation
    * logging (to file. The emulation DLL should leave the console alone, for our own sanity)
* Here's a list of functions prototype I is hooking. Check them and implement them if it makes sense.
  * kernel32
    * CreateConsoleScreenBuffer
    * SetConsoleCursorInfo
    * SetConsoleMode
    * SetConsoleScreenBufferSize
* display driver handling is a mess
  * Somewhere there's a factory function that creates display drivers from display driver codes
  * commandline.cpp contains code to map from strings to display driver codes.
* string.cpp: some stuff in there could do with some unit testing, and also optimizing (string lengths are determined multiple times)
* Log output to console: this is sometimes tricky.
  * Console applications work out of the box.
  * Magrathea: Succeeds with the following steps
    * Pass the launcher's process ID to the emulation DLL
    * Inside the emulation DLL
      * Use AttachConsole to attach to the parent process' console
      * Use WriteConsole(W) to write to the console
      * Be careful, though: MSDN says:
        "WriteConsole fails if it is used with a standard handle that is redirected to a file.
        If an application processes multilingual output that can be redirected, determine whether
        the output handle is a console handle (one method is to call the GetConsoleMode function
        and check whether it succeeds). If the handle is a console handle, call WriteConsole.
        If the handle is not a console handle, the output is redirected and you should call
        WriteFile to perform the I/O."...oh well.
